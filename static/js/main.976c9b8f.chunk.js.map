{"version":3,"sources":["components/Cell.js","components/CellContainer.js","components/TurnDisplay.js","components/ResultDisplay.js","components/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","status","onClick","className","CellContainer","cellStatuses","onCellClick","map","index","e","TurnDisplay","playerId","ResultDisplay","winner","onClickReset","message","check3","cells","start","step","val","i","n","initialState","isActive","Array","fill","reducer","state","action","type","TicTacToe","useReducer","dispatch","newCells","newWinner","checkWin","console","log","every","cell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAWeA,MATf,YAAoC,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QAChBC,EAAY,OAKhB,OAJc,MAAVF,IACAE,GAAwB,IAAXF,EAAe,OAAS,SAGlC,qBAAKE,UAAWA,EAAWD,QAASA,K,MCShCE,MAdf,YAAuD,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YACnC,OACI,qBAAKH,UAAU,gBAAf,SACKE,EAAaE,KAAI,SAACN,EAAQO,GAAT,OACd,cAAC,EAAD,CAEIP,OAAQA,EACRC,QAAS,SAACO,GAAD,OAAOH,EAAYE,EAAOC,KAF9BD,SCAVE,MARf,YAAoC,IAAbC,EAAY,EAAZA,SACnB,OACI,sBAAMR,UAAU,cAAhB,0BAAyCQ,EAAW,EAApD,aACiB,IAAbA,EAAiB,MAAQ,OAD7B,Q,MCcOC,MAdf,YAAkD,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,aACvBC,EACQ,MAAVF,EAAiB,cAAjB,iBAA2CA,EAAS,EAApD,UAEJ,OACI,uBAAMV,UAAU,gBAAhB,UACKY,EACD,wBAAQZ,UAAU,QAAQD,QAASY,EAAnC,wBCDZ,SAASE,EAAOC,EAAOC,EAAOC,GAC1B,IAAMC,EAAMH,EAAMC,GAClB,GAAW,MAAPE,EAAa,OAAO,EAExB,IAAK,IAAIC,EAAIH,EAAQC,EAAMG,EAAI,EAAGA,EAAI,EAAGD,GAAKF,EAAMG,IAChD,GAAIL,EAAMI,KAAOD,EAAK,OAAO,EAEjC,OAAO,EAwBX,SAASG,IACL,MAAO,CACHC,UAAU,EACVX,OAAQ,KACRI,MAAOQ,MAAM,GAAGC,KAAK,MACrBf,SAAU,GAIlB,SAASgB,EAAQC,EAAOC,GACpB,OAAQA,EAAOC,MACX,IAAK,QACD,OAAOP,IACX,QACI,OAAO,2BAAKK,GAAUC,IAyDnBE,MArDf,WACI,MAA0DC,qBACtDL,EACAJ,KAFJ,0BAASC,EAAT,EAASA,SAAUX,EAAnB,EAAmBA,OAAQI,EAA3B,EAA2BA,MAAON,EAAlC,EAAkCA,SAAYsB,EAA9C,KAmCA,OACI,gCACI,qBAAK9B,UAAU,QAAf,SACKqB,EACG,cAAC,EAAD,CAAab,SAAUA,IAEvB,cAAC,EAAD,CACIE,OAAQA,EACRC,aAAc,kBAAMmB,EAAS,CAAEH,KAAM,eAIjD,cAAC,EAAD,CAAezB,aAAcY,EAAOX,YA1C5C,SAAqBE,GAEjB,GAAKgB,GAGe,MAAhBP,EAAMT,GAAV,CAGA,IAAM0B,EAAQ,YAAOjB,GACrBiB,EAAS1B,GAASG,EAElBsB,EAAS,CACLhB,MAAOiB,EACPvB,UAAWA,EAAW,GAAK,IAG/B,IAAMwB,EA5Dd,SAAkBlB,GAEd,IAAK,IAAIC,EAAQ,EAAGA,EAAQ,EAAGA,IAC3B,GAAIF,EAAOC,EAAOC,EAAO,GAAI,OAAOD,EAAMC,GAI9C,IAAK,IAAIA,EAAQ,EAAGA,EAAQ,EAAGA,GAAS,EACpC,GAAIF,EAAOC,EAAOC,EAAO,GAAI,OAAOD,EAAMC,GAI9C,OAAIF,EAAOC,EAAO,EAAG,GAAWA,EAAM,GAGlCD,EAAOC,EAAO,EAAG,GAAWA,EAAM,GAE/B,KA2CemB,CAASF,GACV,MAAbC,IACAE,QAAQC,IAAR,iBAAsBzB,EAAS,EAA/B,oBACAoB,EAAS,CACLT,UAAU,EACVX,OAAQsB,KAIZD,EAASK,OAAM,SAACC,GAAD,OAAmB,OAATA,MACzBP,EAAS,CAAET,UAAU,YClFlBiB,MAJf,WACI,OAAO,cAAC,EAAD,KCQIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.976c9b8f.chunk.js","sourcesContent":["import \"./Cell.css\";\r\n\r\nfunction Cell({ status, onClick }) {\r\n    let className = \"Cell\";\r\n    if (status != null) {\r\n        className += status === 0 ? \" red\" : \" blue\";\r\n    }\r\n\r\n    return <div className={className} onClick={onClick}></div>;\r\n}\r\n\r\nexport default Cell;\r\n","import Cell from \"./Cell\";\r\nimport \"./CellContainer.css\";\r\n\r\nfunction CellContainer({ cellStatuses, onCellClick }) {\r\n    return (\r\n        <div className=\"CellContainer\">\r\n            {cellStatuses.map((status, index) => (\r\n                <Cell\r\n                    key={index}\r\n                    status={status}\r\n                    onClick={(e) => onCellClick(index, e)}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CellContainer;\r\n","function TurnDisplay({ playerId }) {\r\n    return (\r\n        <span className=\"TurnDisplay\">{`Player ${playerId + 1} (${\r\n            playerId === 0 ? \"Red\" : \"Blue\"\r\n        })`}</span>\r\n    );\r\n}\r\n\r\nexport default TurnDisplay;\r\n","import \"./ResultDisplay.css\";\r\n\r\nfunction ResultDisplay({ winner, onClickReset }) {\r\n    const message =\r\n        winner == null ? \"It's a Tie!\" : `Player ${winner + 1} Wins!`;\r\n\r\n    return (\r\n        <span className=\"ResultDisplay\">\r\n            {message}\r\n            <button className=\"reset\" onClick={onClickReset}>\r\n                â†»\r\n            </button>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default ResultDisplay;\r\n","import { useReducer } from \"react\";\r\n\r\nimport \"./TicTacToe.css\";\r\n\r\nimport CellContainer from \"./CellContainer\";\r\nimport TurnDisplay from \"./TurnDisplay\";\r\nimport ResultDisplay from \"./ResultDisplay\";\r\n\r\nfunction check3(cells, start, step) {\r\n    const val = cells[start];\r\n    if (val == null) return false;\r\n\r\n    for (let i = start + step, n = 0; n < 2; i += step, n++) {\r\n        if (cells[i] !== val) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n// Not the most optimized but good enough for a shitty tic tac toe\r\nfunction checkWin(cells) {\r\n    // Check columns\r\n    for (let start = 0; start < 3; start++) {\r\n        if (check3(cells, start, 3)) return cells[start];\r\n    }\r\n\r\n    // Check rows\r\n    for (let start = 0; start < 9; start += 3) {\r\n        if (check3(cells, start, 1)) return cells[start];\r\n    }\r\n\r\n    // Check \\ diagonal\r\n    if (check3(cells, 0, 4)) return cells[0];\r\n\r\n    // Check / diagonal\r\n    if (check3(cells, 2, 2)) return cells[2];\r\n\r\n    return null;\r\n}\r\n\r\nfunction initialState() {\r\n    return {\r\n        isActive: true,\r\n        winner: null,\r\n        cells: Array(9).fill(null),\r\n        playerId: 0,\r\n    };\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case \"reset\":\r\n            return initialState();\r\n        default:\r\n            return { ...state, ...action };\r\n    }\r\n}\r\n\r\nfunction TicTacToe() {\r\n    const [{ isActive, winner, cells, playerId }, dispatch] = useReducer(\r\n        reducer,\r\n        initialState()\r\n    );\r\n\r\n    function handleClick(index) {\r\n        // Don't handle click if the game is over\r\n        if (!isActive) return;\r\n\r\n        // Prevent already colored cells from being updated\r\n        if (cells[index] != null) return;\r\n\r\n        // Set cell at the given index to playerId\r\n        const newCells = [...cells];\r\n        newCells[index] = playerId;\r\n\r\n        dispatch({\r\n            cells: newCells,\r\n            playerId: (playerId + 1) % 2, // Swaps playerId from 0 to 1 or vice versa\r\n        });\r\n\r\n        const newWinner = checkWin(newCells);\r\n        if (newWinner != null) {\r\n            console.log(`Player ${winner + 1} is the Winner!`);\r\n            dispatch({\r\n                isActive: false,\r\n                winner: newWinner,\r\n            });\r\n        }\r\n\r\n        if (newCells.every((cell) => cell !== null)) {\r\n            dispatch({ isActive: false });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"panel\">\r\n                {isActive ? (\r\n                    <TurnDisplay playerId={playerId} />\r\n                ) : (\r\n                    <ResultDisplay\r\n                        winner={winner}\r\n                        onClickReset={() => dispatch({ type: \"reset\" })}\r\n                    ></ResultDisplay>\r\n                )}\r\n            </div>\r\n            <CellContainer cellStatuses={cells} onCellClick={handleClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TicTacToe;\r\n","import \"./App.css\";\nimport TicTacToe from \"./components/TicTacToe\";\n\nfunction App() {\n    return <TicTacToe />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}